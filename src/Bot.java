import org.apache.commons.io.FileUtils;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.GetFile;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.File;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;

public class Bot extends TelegramLongPollingBot  {
    @Override
    public void onUpdateReceived(Update update) {
        SendMessage sendMessage = new SendMessage().setChatId(update.getMessage().getChatId());


        if (update.hasMessage() && update.getMessage().hasDocument()) //проверяем, есть ли сообщение и есть ли в этом сообщении вложение
        {
           
            GetFile uploadedFile = new GetFile();//экземпляр класса для работы с сообщениями, в которых есть вложения
            uploadedFile.setFileId(update.getMessage().getDocument().getFileId());//получаем и устаналиваем айди вложения
            try {
                File file = execute(uploadedFile);//создаём объект, в который записываем данные вложения
                String originalFileName = update.getMessage().getDocument().getFileName();//получаем реальное имя вложения (просто для красоты, чтобы не было file-1.*, file-2.* и т.д.)
                java.io.File localFile = new java.io.File("/home/server/MalwareCheck/" + originalFileName);//устанавливаем путь для скачивания вложений
                InputStream is = new URL(file.getFileUrl(getBotToken())).openStream();//открываем поток по полученному URL вложения
                FileUtils.copyInputStreamToFile(is, localFile);//копируем данные из потока в файл

                AvCheck avCheck = new AvCheck();//создаём экземпляр класса для проверки скачанного вложения антивирусами
                sendMessage.enableMarkdown(true);//активируем Markdown для отправляемых сообщений
                sendMessage.setReplyToMessageId(update.getMessage().getMessageId());//устанавливаем айди сообщения, чтобы ответить на него
                sendMessage.setText(avCheck.checkFile(originalFileName));//устаналиваем ответ на сообщение вызовом метода для проверки файла
                execute(sendMessage);//отправляем сообщение
            } catch (TelegramApiException | IOException | InterruptedException e) {
                e.printStackTrace();
            }
        }
    }

    @Override
    public String getBotUsername() {
        return "@*"; //подставить вместо звёздочки имя бота
    }

    @Override
    public String getBotToken() {
        return "*"; //подставить вместо звёздочки токен бота (выдаётся BotFather'ом при создании бота)
    }
}