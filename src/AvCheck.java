
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class AvCheck {
    String sophosOutput = "";
    String clamavOutput = "";
    String comodoOutput = "";
    String fprotOutput = "";
    String drwebOutput = "";

    public String checkFile(String fileName) throws InterruptedException {

        Parser parser = new Parser();

        //поток для проверки Sophos
        Thread sophosThread = new Thread(){
            public void run(){

                Process runSophos = null;
                try {
                    runSophos = Runtime.getRuntime().exec("docker run --rm -v /home/server/MalwareCheck:/malware:ro " +
                            "malice/sophos:updated " + fileName);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                BufferedReader brSophos = new BufferedReader(
                        new InputStreamReader(runSophos.getInputStream()));
                try {
                    sophosOutput = brSophos.readLine();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                try {
                    runSophos.waitFor();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println("exit: " + runSophos.exitValue() + " " + sophosOutput);
                runSophos.destroy();
            }
        };

        //поток для проверки clamav
        Thread clamavThread = new Thread(){
            public void run(){
                Process runClamav = null;
                try {
                    runClamav = Runtime.getRuntime().exec("docker run --rm -v /home/server/MalwareCheck:/malware:ro " +
                            "malice/clamav:updated " + fileName);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                BufferedReader brClamav = new BufferedReader(
                        new InputStreamReader(runClamav.getInputStream()));
                try {
                    clamavOutput = brClamav.readLine();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                try {
                    runClamav.waitFor();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println("exit: " + runClamav.exitValue() + " " + clamavOutput);
                runClamav.destroy();
            }
        };

        //поток для проверки comodo
        Thread comodoThread = new Thread(){
            public void run(){
                Process runComodo = null;
                try {
                    runComodo = Runtime.getRuntime().exec("docker run --rm -v /home/server/MalwareCheck:/malware:ro " +
                            "malice/comodo:updated " + fileName);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                BufferedReader brComodo = new BufferedReader(
                        new InputStreamReader(runComodo.getInputStream()));
                try {
                    comodoOutput = brComodo.readLine();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                try {
                    runComodo.waitFor();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println("exit: " + runComodo.exitValue() + " " + comodoOutput);
                runComodo.destroy();
            }
        };

        //поток для проверки fprot
        Thread fprotThread = new Thread(){
            public void run(){
                Process runFprot = null;
                try {
                    runFprot = Runtime.getRuntime().exec("docker run --rm -v /home/server/MalwareCheck:/malware:ro " +
                            "malice/fprot:updated " + fileName);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                BufferedReader brFprot = new BufferedReader(
                        new InputStreamReader(runFprot.getInputStream()));
                try {
                    fprotOutput = brFprot.readLine();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                try {
                    runFprot.waitFor();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println("exit: " + runFprot.exitValue() + " " + fprotOutput);
                runFprot.destroy();
            }
        };

        //поток для проверки drweb
        Thread drwebThread = new Thread(){
            public void run(){
                Process runDrweb = null;
                try {
                    runDrweb = Runtime.getRuntime().exec("docker run --rm -v /home/server/MalwareCheck:/malware:ro " +
                            "malice/drweb:updated " + fileName);
                } catch (IOException e) {
                    e.printStackTrace();
                }
                BufferedReader brDrweb = new BufferedReader(
                        new InputStreamReader(runDrweb.getInputStream()));
                try {
                    drwebOutput = brDrweb.readLine();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                try {
                    runDrweb.waitFor();
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                System.out.println("exit: " + runDrweb.exitValue() + " " + drwebOutput);
                runDrweb.destroy();
            }
        };

        //стартуем все потоки
        sophosThread.start();
        clamavThread.start();
        comodoThread.start();
        fprotThread.start();
        drwebThread.start();

        //ждём окончания работы потоков
        sophosThread.join();
        clamavThread.join();
        comodoThread.join();
        fprotThread.join();
        drwebThread.join();

        //возвращаем результат проверки, предварительно прогнанный через парсер JSON
        return   parser.parseSophos(sophosOutput) + "\n" +
                 parser.parseClamav(clamavOutput) + "\n" +
                 parser.parseComodo(comodoOutput) + "\n" +
                 parser.parseFprot(fprotOutput)  + "\n" +
                 parser.parseDrweb(drwebOutput) + "\n";
    }
}

